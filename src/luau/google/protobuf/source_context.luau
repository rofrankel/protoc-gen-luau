--!strict
--!nolint LocalUnused
--# selene: allow(empty_if, if_same_then_else, manual_table_clone, unused_variable)
-- This file was @autogenerated by protoc-gen-luau
local proto = require("../../proto")

type _SourceContextImpl = {
	__index: _SourceContextImpl,
	new: () -> SourceContext,
	encode: (self: SourceContext) -> buffer,
	decode: (input: buffer) -> SourceContext,
	jsonEncode: (self: SourceContext) -> { [string]: any },
	jsonDecode: (input: { [string]: any }) -> SourceContext,
}

type _SourceContextFields = {
	file_name: string,
}

export type SourceContext = typeof(setmetatable({} :: _SourceContextFields, {} :: _SourceContextImpl))

local SourceContext: proto.Message<_SourceContextImpl> = {} :: _SourceContextImpl
SourceContext.__index = SourceContext

function SourceContext.new(data: _SourceContextFields?): SourceContext
	return setmetatable({
		file_name = data and data["file_name"] or "",
	}, SourceContext)
end

function SourceContext.encode(self: SourceContext): buffer
	local output = buffer.create(0)
	local cursor = 0

	if self.file_name ~= "" then
		output, cursor = proto.writeTag(output, cursor, 1, proto.wireTypes.lengthDelimited)
		output, cursor = proto.writeString(output, cursor, self.file_name)
	end

	local shrunkBuffer = buffer.create(cursor)
	buffer.copy(shrunkBuffer, 0, output, 0, cursor)
	return shrunkBuffer
end

function SourceContext.decode(input: buffer): SourceContext
	local self = SourceContext.new()
	local cursor = 0

	while cursor < buffer.len(input) do
		local field, wireType
		field, wireType, cursor = proto.readTag(input, cursor)

		if wireType == proto.wireTypes.varint then
			-- No fields
		elseif wireType == proto.wireTypes.lengthDelimited then
			if field == 1 then
				local value
				value, cursor = proto.readBuffer(input, cursor)
				self.file_name = buffer.tostring(value)
			end
		elseif wireType == proto.wireTypes.i32 then
			-- No fields
		elseif wireType == proto.wireTypes.i64 then
			-- No fields
		else
			error("Unsupported wire type: " .. wireType)
		end
	end

	return self
end

function SourceContext.jsonEncode(self: SourceContext): any
	local output: {
		fileName: string?,
	} = {}

	if self.file_name ~= "" then
		output.fileName = self.file_name
	end

	return output
end

function SourceContext.jsonDecode(input: { [string]: any }): SourceContext
	local self = SourceContext.new()

	if input.file_name ~= nil then
		self.file_name = input.file_name
	end

	if input.fileName ~= nil then
		self.file_name = input.fileName
	end

	return self
end

return {
	SourceContext = SourceContext,
}
